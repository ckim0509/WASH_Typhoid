# remove all objects from workspace
rm (list = ls ())
setwd("~/GitHub/WASH_typhoid")
# start time
start_time <- Sys.time ()
print (paste0 ("start time = ", start_time))
# import data -- combined data
# input_articles <- read_excel("data/input_articles.xlsx")
dat <- read_sheet('https://docs.google.com/spreadsheets/d/1ArKNfpa124oPdrbGK1-9PnzRWWvffsxgOUfgCVs_p2Q/edit#gid=0', col_types = "ccccccccccc")
# parsing test
ci_text <- "2.5-21"
ci_text <- ".19-1.0"
lb <- grep("[0-9]*", ci_text, value = T)
# as.numeric(str_extract_all(ci_text,"\\(?[0-9,.]+\\)?")[[1]])
as.numeric(str_extract_all(ci_text, "[0-9.]+")[[1]])
calc_se <- function(lower, upper){
se <- (upper - lower) / (2 * qnorm(0.975))
return (se)
}
# rename the columns
dat <- dat %>% rename("mOR"  = "Crude OR",
"mCI"  = "Crude OR CI",
"aOR"  = "Adjusted OR",
"aCI"  = "Adjusted OR CI")
dat <- data.table(dat)
# remove the blank rows (n = 175 - 0 = 175)
dat <- dat[!(is.na(dat$mOR) & is.na(dat$aOR)),]
# remove values not classified (n = 79)
dat <- dat[!(dat$`JMP WASH Category` == "Trash"| dat$`JMP WASH Category` == "NOT WASH"),]
# remove reference values (n = 75)
dat <- dat[(dat$mOR != "ref" | is.na(dat$mOR)) & (dat$aOR != "ref" | is.na(dat$aOR)),]
# remove studies not using blood culture to confirm typhoid (n = 48)
# check the number of studies not using blood culture to confirm typhoid
# dat %>% filter(dat$Culture == "No") %>% count(Author, Culture)
dat <- dat[dat$Culture != "No",]
# inspect JMP WASH Category
unique(dat$`JMP WASH Category`)
dat %>% count(`JMP WASH Category`)
category_meta <- c("Improved water source",
"Water Source - Surface",
"Water treatment - Treated water",
"Water treatment - Untreated water",
"Sanitation - Open defecation",
"Hygiene - Basic",
"Hygiene - Limited")
# create baseline data
OR <- as.numeric(ifelse(is.na(dat$aOR), dat$mOR, dat$aOR))
ci_text <- ifelse(is.na(dat$aCI), dat$mCI, dat$aCI)
ci <- str_extract_all(ci_text, "[0-9.]+")
lower <- as.numeric(sapply(ci, function(x) x[1]))
upper <- as.numeric(sapply(ci, function(x) x[2]))
se <- calc_se(lower = log(lower), upper = log(upper))
input_data <- data.frame(category = dat$`JMP WASH Category`,
author   = dat$Author,
log_OR   = log(OR),
SE       = se)
meta_freq <- function(input_category){
input_dat_freq <- input_data %>% filter(input_data$category == input_category)
res <- rma(yi = exp(log_OR), sei = exp(SE), data = input_dat_freq) # Perform meta-analysis
summary <- summary(res)
return(summary)}
# summary result -- for each categories
category_meta
lapply(category_meta, meta_freq)
meta_baye <- function(input_category){
input_dat_baye <- input_data %>% filter(input_data$category == input_category)
priors <- c(prior(normal(0,1), class = Intercept),
prior(cauchy(0,0.5), class = sd))
m_brm <- brm(log_OR|se(SE) ~ 1 + (1|author),
data = input_dat_baye,
prior = priors,
iter = 4000)
# summary(m.brm)
return(m_brm)}
# m_brm <- meta_baye("Sanitation - Open defecation")
# summary(meta_baye("Improved water source"))
# summary(meta_baye("Water Source - Surface"))
# summary(meta_baye("Water treatment - Treated water"))
# summary(meta_baye("Water treatment - Untreated water"))
# summary(meta_baye("Sanitation - Open defecation"))
# summary(meta_baye("Hygiene - Basic"))
# summary(meta_baye("Hygiene - Limited"))
pooled_effect_draws <- function(m_brm){
# extract the posterior distribution for each study
study.draws <- spread_draws(m_brm, r_author[author,], b_Intercept) %>%
mutate(b_Intercept = r_author + b_Intercept)
# generate the distribution of the pooled effect
pooled.effect.draws <- spread_draws(m_brm, b_Intercept) %>%
mutate(author = "Pooled Effect")
forest.data <- bind_rows(study.draws,
pooled.effect.draws) %>%
ungroup() %>%
# clean the study labels
mutate(author = str_replace_all(author, ".et.al.", " et al.")) %>%
# reorder the study factor levels by effect size (high to low).
mutate(author = reorder(author, b_Intercept)) %>%
# use exp() to revert it to Odd Ratio
mutate(b_Intercept = exp(b_Intercept))
return(forest.data)}
create_forestplot <- function(m_brm,
forest.data,
x_limit,
title_name){
# display the effect size
forest.data.summary <- group_by(forest.data, author) %>%
median_qi(b_Intercept)
forestplot <- ggplot(aes(b_Intercept,
relevel(author, "Pooled Effect",
after = Inf)),
data = forest.data) +
# Add vertical lines for pooled effect and CI
geom_vline(xintercept = data.table(forest.data.summary)[author == "Pooled Effect", b_Intercept],
color = "grey", size = 1) +
geom_vline(xintercept = data.table(forest.data.summary)[author == "Pooled Effect", c(.lower, .upper)],
color = "grey", linetype = 2) +
geom_vline(xintercept = 1, color = "black",
size = 1) +
scale_x_continuous(limits = c(0, x_limit)) +
# Add densities
geom_density_ridges(fill = "grey",
rel_min_height = 0.01,
col = NA, scale = 1,
alpha = 0.8) +
geom_pointintervalh(data = forest.data.summary,
size = 1) +
# Add text and labels
geom_text(data = mutate_if(forest.data.summary,
is.numeric, round, 2),
aes(label = glue("{b_Intercept} [{.lower}, {.upper}]"),
x = Inf), hjust = "inward") +
labs(x = "Odd Ratio [95% Credible Interval]", # summary measure
y = element_blank()) +
theme_minimal() +
ggtitle(paste(title_name)) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size = 15))
return(forestplot)
} # end of function -- create_forest_plot
forest_plot <- function(input_category, x_limit){
m_brm_input <- meta_baye(input_category)
forest_data <- pooled_effect_draws(m_brm_input)
forestplot  <- create_forestplot(m_brm       = m_brm_input,
forest.data = forest_data,
x_limit     = x_limit,
title_name  = input_category)
# save plot
ggsave (filename = paste(input_category, ".png"),
path = "figures",
width = 8,
height = 6,
dpi = 600)
return(forestplot)}
forest_plot(input_category = "Sanitation - Open defecation",
x_limit        = 7)
# load libraries
library (brms)
library (dplyr)
library (forcats)
library (ggplot2)
library (ggridges)
library (glue)
library (metafor)
library (readxl)
library (rstan)
library (stringr)
library (tidybayes)
library (googlesheets4)
library (data.table)
# remove all objects from workspace
rm (list = ls ())
setwd("~/GitHub/WASH_typhoid")
# start time
start_time <- Sys.time ()
print (paste0 ("start time = ", start_time))
# import data -- combined data
# input_articles <- read_excel("data/input_articles.xlsx")
dat <- read_sheet('https://docs.google.com/spreadsheets/d/1ArKNfpa124oPdrbGK1-9PnzRWWvffsxgOUfgCVs_p2Q/edit#gid=0', col_types = "ccccccccccc")
meta_baye <- function(input_category){
input_dat_baye <- input_data %>% filter(input_data$category == input_category)
priors <- c(prior(normal(0,1), class = Intercept),
prior(cauchy(0,0.5), class = sd))
m_brm <- brm(log_OR|se(SE) ~ 1 + (1|author),
data = input_dat_baye,
prior = priors,
iter = 4000)
# summary(m.brm)
return(m_brm)}
# m_brm <- meta_baye("Sanitation - Open defecation")
install.packages("devtools")
devtools::install_github("mcguinlu/robvis")
# load libraries
library (brms)
library (dplyr)
library (forcats)
library (ggplot2)
library (ggridges)
library (glue)
library (metafor)
library (readxl)
library (rstan)
library (stringr)
library (tidybayes)
library (googlesheets4)
library (data.table)
# remove all objects from workspace
rm (list = ls ())
setwd("~/GitHub/WASH_typhoid")
# start time
start_time <- Sys.time ()
print (paste0 ("start time = ", start_time))
```
### Importing data from Google Sheets
```{r}
# import data -- combined data
# input_articles <- read_excel("data/input_articles.xlsx")
dat <- read_sheet('https://docs.google.com/spreadsheets/d/1ArKNfpa124oPdrbGK1-9PnzRWWvffsxgOUfgCVs_p2Q/edit#gid=0', col_types = "cccccccccccccc")
# load libraries
library (brms)
library (dplyr)
library (forcats)
library (ggplot2)
library (ggridges)
library (glue)
library (metafor)
library (readxl)
library (rstan)
library (stringr)
library (tidybayes)
library (googlesheets4)
library (data.table)
# remove all objects from workspace
rm (list = ls ())
setwd("~/GitHub/WASH_typhoid")
# start time
start_time <- Sys.time ()
print (paste0 ("start time = ", start_time))
```
### Importing data from Google Sheets
```{r}
# import data -- combined data
# input_articles <- read_excel("data/input_articles.xlsx")
dat <- read_sheet('https://docs.google.com/spreadsheets/d/1ArKNfpa124oPdrbGK1-9PnzRWWvffsxgOUfgCVs_p2Q/edit#gid=0', col_types = "cccccccccccccc")
```
### Parsing texts to extract upper and lower bounds of the confidence interval
```{r}
# parsing test
ci_text <- "2.5-21"
ci_text <- ".19-1.0"
lb <- grep("[0-9]*", ci_text, value = T)
# as.numeric(str_extract_all(ci_text,"\\(?[0-9,.]+\\)?")[[1]])
as.numeric(str_extract_all(ci_text, "[0-9.]+")[[1]])
```
### Standard error computation
```{r}
calc_se <- function(lower, upper){
se <- (upper - lower) / (2 * qnorm(0.975))
return (se)
}
```
### Data cleaning
```{r}
# rename the columns
dat <- dat %>% rename("mOR"  = "Crude OR",
"mCI"  = "Crude OR CI",
"aOR"  = "Adjusted OR",
"aCI"  = "Adjusted OR CI")
dat <- data.table(dat)
# remove the blank rows (n = 175 - 0 = 175)
dat <- dat[!(is.na(dat$mOR) & is.na(dat$aOR)),]
# remove values not classified (n = 77)
dat <- dat[!(dat$`JMP WASH Category` == "Trash"|
dat$`JMP WASH Category` == "NOT WASH"|
dat$`JMP WASH Category` == "Trash --Improved water source -- contaminated"),]
# remove reference values (n = 73)
dat <- dat[(dat$mOR != "ref" | is.na(dat$mOR)) & (dat$aOR != "ref" | is.na(dat$aOR)),]
# remove studies not using blood culture to confirm typhoid (n = 48)
# check the number of studies not using blood culture to confirm typhoid
# dat %>% filter(dat$Culture == "No") %>% count(Author, Culture)
dat <- dat[dat$Culture != "No",]
```
### Create analysis baseline
```{r}
# inspect JMP WASH Category
unique(dat$`JMP WASH Category`)
dat %>% count(`JMP WASH Category`)
category_meta <- c("Improved water source",
"Water Source - Surface",
"Water treatment - Treated water",
"Water treatment - Untreated water",
"Sanitation - Open defecation",
"Hygiene - Basic",
"Hygiene - Limited")
# create baseline data
OR <- as.numeric(ifelse(is.na(dat$aOR), dat$mOR, dat$aOR))
ci_text <- ifelse(is.na(dat$aCI), dat$mCI, dat$aCI)
ci <- str_extract_all(ci_text, "[0-9.]+")
lower <- as.numeric(sapply(ci, function(x) x[1]))
upper <- as.numeric(sapply(ci, function(x) x[2]))
se <- calc_se(lower = log(lower), upper = log(upper))
input_data <- data.frame(category = dat$`JMP WASH Category`,
author   = dat$Author,
log_OR   = log(OR),
SE       = se)
```
### Frequentist Meta-Analysis
```{r}
meta_freq <- function(input_category){
input_dat_freq <- input_data %>% filter(input_data$category == input_category)
res <- rma(yi = exp(log_OR), sei = exp(SE), data = input_dat_freq) # Perform meta-analysis
summary <- summary(res)
return(summary)}
# summary result -- for each categories
category_meta
lapply(category_meta, meta_freq)
```
### Bayesian Meta-Analysis
```{r}
meta_baye <- function(input_category){
input_dat_baye <- input_data %>% filter(input_data$category == input_category)
priors <- c(prior(normal(0,1), class = Intercept),
prior(cauchy(0,0.5), class = sd))
m_brm <- brm(log_OR|se(SE) ~ 1 + (1|author),
data = input_dat_baye,
prior = priors,
iter = 4000)
# summary(m.brm)
return(m_brm)}
# m_brm <- meta_baye("Sanitation - Open defecation")
```
### Model inspection -- check Rhat wheather it is smaller than 1.01
```{r}
# summary(meta_baye("Improved water source"))
# summary(meta_baye("Water Source - Surface"))
# summary(meta_baye("Water treatment - Treated water"))
# summary(meta_baye("Water treatment - Untreated water"))
# summary(meta_baye("Sanitation - Open defecation"))
# summary(meta_baye("Hygiene - Basic"))
# summary(meta_baye("Hygiene - Limited"))
```
### Prepare the data to generate the plot
```{r}
pooled_effect_draws <- function(m_brm){
# extract the posterior distribution for each study
study.draws <- spread_draws(m_brm, r_author[author,], b_Intercept) %>%
mutate(b_Intercept = r_author + b_Intercept)
# generate the distribution of the pooled effect
pooled.effect.draws <- spread_draws(m_brm, b_Intercept) %>%
mutate(author = "Pooled Effect")
forest.data <- bind_rows(study.draws,
pooled.effect.draws) %>%
ungroup() %>%
# clean the study labels
mutate(author = str_replace_all(author, ".et.al.", " et al.")) %>%
# reorder the study factor levels by effect size (high to low).
mutate(author = reorder(author, b_Intercept)) %>%
# use exp() to revert it to Odd Ratio
mutate(b_Intercept = exp(b_Intercept))
return(forest.data)}
```
### Function to generate forest plot
```{r}
create_forestplot <- function(m_brm,
forest.data,
x_limit,
title_name){
# display the effect size
forest.data.summary <- group_by(forest.data, author) %>%
median_qi(b_Intercept)
forestplot <- ggplot(aes(b_Intercept, relevel(author, "Pooled Effect", after = Inf)),
data = forest.data) +
# Add vertical lines for pooled effect and CI
geom_vline(xintercept = data.table(forest.data.summary)[author == "Pooled Effect", b_Intercept],
color = "grey", size = 1) +
geom_vline(xintercept = data.table(forest.data.summary)[author == "Pooled Effect", c(.lower, .upper)],
color = "grey", linetype = 2) +
geom_vline(xintercept = 1, color = "black",
size = 0.5) +
scale_x_continuous(limits = c(0, x_limit)) +
# Add densities
geom_density_ridges(fill = "grey",
rel_min_height = 0.01,
col = NA, scale = 1,
alpha = 0.8) +
geom_pointintervalh(data = forest.data.summary,
size = 1) +
# Add text and labels
geom_text(data = mutate_if(forest.data.summary,
is.numeric, round, 2),
aes(label = glue("{b_Intercept} [{.lower}, {.upper}]"),
x = Inf), hjust = "inward") +
labs(x = "Odd Ratio [95% Credible Interval]", # summary measure
y = element_blank()) +
theme_minimal() +
ggtitle(paste(title_name)) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size = 15))
return(forestplot)
} # end of function -- create_forest_plot
```
### Combine functions to generate and save forest plot
```{r}
forest_plot <- function(input_category,
input_title,
x_limit){
m_brm_input <- meta_baye(input_category)
forest_data <- pooled_effect_draws(m_brm_input)
forestplot  <- create_forestplot(m_brm       = m_brm_input,
forest.data = forest_data,
x_limit     = x_limit,
title_name  = input_title)
# save plot
ggsave (filename = paste(input_title, ".png"),
path = "figures",
width = 6,
height = 4,
dpi = 600)
return(forestplot)}
```
### grenerate forest plot
```{r}
# JMP WASH categories included in the meta-analysis
category_meta
dat %>% count(`JMP WASH Category`)
# lapply(category_meta, forest_plot)
# R session aborted
# generate forest plot for each category individually
forest_plot(input_category = "Improved water source",
input_title    = "Water Source (Improved)",
x_limit        = 5)
```{r}
pooled_effect_draws <- function(m_brm){
# extract the posterior distribution for each study
study.draws <- spread_draws(m_brm, r_author[author,], b_Intercept) %>%
mutate(b_Intercept = r_author + b_Intercept)
# generate the distribution of the pooled effect
pooled.effect.draws <- spread_draws(m_brm, b_Intercept) %>%
mutate(author = "Pooled Effect")
forest.data <- bind_rows(study.draws,
pooled.effect.draws) %>%
ungroup() %>%
# clean the study labels
mutate(author = str_replace_all(author, ".et.al.", " et al.")) %>%
# reorder the study factor levels by effect size (high to low).
mutate(author = reorder(author, b_Intercept)) %>%
# use exp() to revert it to Odd Ratio
mutate(b_Intercept = exp(b_Intercept))
return(forest.data)}
```
### Function to generate forest plot
```{r}
create_forestplot <- function(m_brm,
forest.data,
x_limit,
title_name){
# display the effect size
forest.data.summary <- group_by(forest.data, author) %>%
median_qi(b_Intercept)
forestplot <- ggplot(aes(b_Intercept, relevel(author, "Pooled Effect", after = Inf)),
data = forest.data) +
# Add vertical lines for pooled effect and CI
geom_vline(xintercept = data.table(forest.data.summary)[author == "Pooled Effect", b_Intercept],
color = "grey", size = 1) +
geom_vline(xintercept = data.table(forest.data.summary)[author == "Pooled Effect", c(.lower, .upper)],
color = "grey", linetype = 2) +
geom_vline(xintercept = 1, color = "black",
size = 0.5) +
scale_x_continuous(limits = c(0, x_limit)) +
# Add densities
stat_halfeye(.width = c(.8, .95), fill = "dodgerblue") +
geom_pointintervalh(data = forest.data.summary,
size = 1) +
# Add text and labels
geom_text(data = mutate_if(forest.data.summary,
is.numeric, round, 2),
aes(label = glue("{b_Intercept} [{.lower}, {.upper}]"),
x = Inf), hjust = "inward") +
labs(x = "Odd Ratio [95% Credible Interval]", # summary measure
y = element_blank()) +
theme_minimal() +
ggtitle(paste(title_name)) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size = 15))
return(forestplot)
} # end of function -- create_forest_plot
```
### Combine functions to generate and save forest plot
```{r}
forest_plot <- function(input_category,
input_title,
x_limit){
m_brm_input <- meta_baye(input_category)
forest_data <- pooled_effect_draws(m_brm_input)
forestplot  <- create_forestplot(m_brm       = m_brm_input,
forest.data = forest_data,
x_limit     = x_limit,
title_name  = input_title)
# save plot
ggsave (filename = paste(input_title, ".png"),
path = "figures",
width = 6,
height = 4,
dpi = 600)
return(forestplot)}
```
### grenerate forest plot
```{r}
# JMP WASH categories included in the meta-analysis
category_meta
dat %>% count(`JMP WASH Category`)
# lapply(category_meta, forest_plot)
# R session aborted
# generate forest plot for each category individually
forest_plot(input_category = "Improved water source",
input_title    = "Water Source (Improved)",
x_limit        = 5)
