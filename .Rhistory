### Importing data from Google Sheets
dat <- read_sheet('https://docs.google.com/spreadsheets/d/16I5yak3-j3rEqLLcdFCcqzeQSyYjSGihXIbmZxqEILs/edit#gid=2036014622')
### hospitalization day
# data set
dat_study <- dat[, c("Study", "Pathogen", "Suceptible_profile", "Resistance_profile", "Country")]
dat_los_res <- dat[, 53:61]
names(dat_los_res) <- c("hospital_day_res", "statistical_measure", "comment", "uncertainty/range",
"uncertainty/range_comment", "higher", "lower", "other", "n")
dat_stu_hos_res <- cbind(dat_study, dat_los_res)
dat_stu_hos_res <- dat_stu_hos_res[(dat_stu_hos_res$Resistance_profile != "Mixed") &
(dat_stu_hos_res$Resistance_profile != "Susceptible") &
(dat_stu_hos_res$hospital_day_res   != "NULL"), ]
dat_stu_hos_res <- data.table(dat_stu_hos_res)
dat_stu_hos_res$hospital_day_res <- as.numeric(dat_stu_hos_res$hospital_day_res)
dat_stu_hos_res[dat_stu_hos_res == "NULL"] <- NA
dat_stu_hos_res$higher <- as.numeric(dat_stu_hos_res$higher)
dat_stu_hos_res$lower <- as.numeric(dat_stu_hos_res$lower)
# adjust variables
dat_stu_hos_res[statistical_measure == "Mean", Mean := hospital_day_res]
dat_stu_hos_res[statistical_measure == "Median", Median := hospital_day_res]
dat_stu_hos_res[`uncertainty/range` == "Interquartile range", higher_i := higher]
dat_stu_hos_res[`uncertainty/range` == "Interquartile range", lower_i := lower]
dat_stu_hos_res[`uncertainty/range` == "Range", higher_r := higher]
dat_stu_hos_res[`uncertainty/range` == "Range", lower_r := lower]
dat_stu_hos_res[`uncertainty/range` == "Standard deviation", SD := other]
dat_stu_hos_res$Pathogen <- factor(dat_stu_hos_res$Pathogen,
levels = c("S. Typhi",
"S. Typhi and S. Paratyphi",
"S. non-Typhi"))
dat_meta <- dat_stu_hos_res[!(is.na(higher) & statistical_measure == "Median"), ]
# dat_meta <- dat_meta[!is.na(`uncertainty/range`), ]
# dat_meta <- dat_meta[dat_meta$Pathogen != "Salmonella non-typhi", ]
dat_meta <- dat_meta %>% arrange(Pathogen, Resistance_profile)
# meta & forestplot -- Salmonella_typhi
ma.data <- metamean(n = n,
mean = Mean,
data = dat_meta,
sd = SD,
median = Median,
q1 = lower_i,
q3 = higher_i,
min = lower_r,
max = higher_r,
#                   subgroup = Pathogen,
common = FALSE,
random = TRUE,
overall = FALSE,
overall.hetstat = FALSE)
png(file = "lenth_of_hospital_stay_res.png", width = 3300, height = 1000, res = 300)
forest(ma.data,
leftcols = c("Study", "Pathogen", "Resistance_profile", "Country"),
leftlabs = c("Study", "Pathogen", "Resistance", "Country"),
rightlabs = c("Mean", "95% CI"),
#      subgroup = FALSE,
xlim = c(1,15),
print.byvar = TRUE)
dev.off()
forest(ma.data,
leftcols = c("Study", "Pathogen", "Resistance_profile", "Country"),
leftlabs = c("Study", "Pathogen", "Resistance", "Country"),
rightlabs = c("Mean", "95% CI"),
#      subgroup = FALSE,
xlim = c(1,15),
print.byvar = TRUE)
png(file = "lenth_of_hospital_stay_res.png", width = 3300, height = 1000, res = 300)
forest(ma.data,
leftcols = c("Study", "Pathogen", "Resistance_profile", "Country"),
leftlabs = c("Study", "Pathogen", "Resistance", "Country"),
rightlabs = c("Mean", "95% CI"),
#      subgroup = FALSE,
xlim = c(1,15),
print.byvar = TRUE)
dev.off()
### hospitalization day
# data set
dat_study <- dat[, c("Study", "Pathogen", "Suceptible_profile", "Resistance_profile", "Country")]
dat_los_res <- dat[, 53:61]
names(dat_los_res) <- c("hospital_day_res", "statistical_measure", "comment", "uncertainty/range",
"uncertainty/range_comment", "higher", "lower", "other", "n")
dat_stu_hos_res <- cbind(dat_study, dat_los_res)
dat_stu_hos_res <- dat_stu_hos_res[(dat_stu_hos_res$Resistance_profile != "Mixed") &
(dat_stu_hos_res$Resistance_profile != "Susceptible") &
(dat_stu_hos_res$hospital_day_res   != "NULL"), ]
dat_stu_hos_res <- data.table(dat_stu_hos_res)
dat_stu_hos_res$hospital_day_res <- as.numeric(dat_stu_hos_res$hospital_day_res)
dat_stu_hos_res[dat_stu_hos_res == "NULL"] <- NA
dat_stu_hos_res$higher <- as.numeric(dat_stu_hos_res$higher)
dat_stu_hos_res$lower <- as.numeric(dat_stu_hos_res$lower)
# adjust variables
dat_stu_hos_res[statistical_measure == "Mean", Mean := hospital_day_res]
dat_stu_hos_res[statistical_measure == "Median", Median := hospital_day_res]
dat_stu_hos_res[`uncertainty/range` == "Interquartile range", higher_i := higher]
dat_stu_hos_res[`uncertainty/range` == "Interquartile range", lower_i := lower]
dat_stu_hos_res[`uncertainty/range` == "Range", higher_r := higher]
dat_stu_hos_res[`uncertainty/range` == "Range", lower_r := lower]
dat_stu_hos_res[`uncertainty/range` == "Standard deviation", SD := other]
dat_stu_hos_res$Pathogen <- factor(dat_stu_hos_res$Pathogen,
levels = c("S. Typhi",
"S. Typhi and S. Paratyphi",
"S. non-Typhi"))
dat_meta <- dat_stu_hos_res[!(is.na(higher) & statistical_measure == "Median"), ]
# dat_meta <- dat_meta[!is.na(`uncertainty/range`), ]
# dat_meta <- dat_meta[dat_meta$Pathogen != "Salmonella non-typhi", ]
dat_meta <- dat_meta %>% arrange(Pathogen, Resistance_profile)
# meta & forestplot -- Salmonella_typhi
ma.data <- metamean(n = n,
mean = Mean,
data = dat_meta,
sd = SD,
median = Median,
q1 = lower_i,
q3 = higher_i,
min = lower_r,
max = higher_r,
#                   subgroup = Pathogen,
common = FALSE,
random = TRUE,
overall = FALSE,
overall.hetstat = FALSE)
png(file = "lenth_of_hospital_stay_res.png", width = 3300, height = 1000, res = 300)
forest(ma.data,
leftcols = c("Study", "Pathogen", "Resistance_profile", "Country"),
leftlabs = c("Study", "Pathogen", "Resistance", "Country"),
rightlabs = c("Mean", "95% CI"),
#      subgroup = FALSE,
xlim = c(1,15),
print.byvar = TRUE)
dev.off()
ma.data <- metamean(n = n,
mean = Mean,
data = dat_meta,
sd = SD,
median = Median,
q1 = lower_i,
q3 = higher_i,
min = lower_r,
max = higher_r,
#                   subgroup = Pathogen,
common = FALSE,
random = TRUE,
overall = FALSE,
overall.hetstat = FALSE)
png(file = "lenth_of_hospital_stay_res.png", width = 3300, height = 1000, res = 300)
forest(ma.data,
leftcols = c("Study", "Pathogen", "Resistance_profile", "Country"),
leftlabs = c("Study", "Pathogen", "Resistance", "Country"),
rightlabs = c("Mean", "95% CI"),
#      subgroup = FALSE,
xlim = c(1,15),
print.byvar = TRUE)
dev.off()
forest(ma.data,
leftcols = c("Study", "Pathogen", "Resistance_profile", "Country"),
leftlabs = c("Study", "Pathogen", "Resistance", "Country"),
rightlabs = c("Mean", "95% CI"),
#      subgroup = FALSE,
xlim = c(1,15),
print.byvar = TRUE)
png(file = "lenth_of_hospital_stay_res.png", width = 3300, height = 1000, res = 300)
forest(ma.data,
leftcols = c("Study", "Pathogen", "Resistance_profile", "Country"),
leftlabs = c("Study", "Pathogen", "Resistance", "Country"),
rightlabs = c("Mean", "95% CI"),
#      subgroup = FALSE,
xlim = c(1,15),
print.byvar = TRUE)
dev.off()
# load libraries
library (brms)
library (dplyr)
library (forcats)
library (ggplot2)
library (ggridges)
library (glue)
library (metafor)
library (readxl)
library (rstan)
library (stringr)
library (tidybayes)
library (googlesheets4)
library (data.table)
# remove all objects from workspace
rm (list = ls ())
setwd("~/GitHub/WASH_typhoid")
# start time
start_time <- Sys.time ()
print (paste0 ("start time = ", start_time))
# import data -- combined data
# input_articles <- read_excel("data/input_articles.xlsx")
dat <- read_sheet('https://docs.google.com/spreadsheets/d/1ArKNfpa124oPdrbGK1-9PnzRWWvffsxgOUfgCVs_p2Q/edit#gid=0', col_types = "ccccccccccccccccccc")
setwd("~/GitHub/WASH_typhoid")
# load libraries
library (brms)
library (dplyr)
library (forcats)
library (ggplot2)
library (ggridges)
library (glue)
library (metafor)
library (readxl)
library (rstan)
library (stringr)
library (tidybayes)
library (googlesheets4)
library (data.table)
# remove all objects from workspace
rm (list = ls ())
setwd("~/GitHub/WASH_typhoid")
# start time
start_time <- Sys.time ()
print (paste0 ("start time = ", start_time))
# import data -- combined data
# input_articles <- read_excel("data/input_articles.xlsx")
dat <- read_sheet('https://docs.google.com/spreadsheets/d/1ArKNfpa124oPdrbGK1-9PnzRWWvffsxgOUfgCVs_p2Q/edit#gid=0', col_types = "ccccccccccccccccccc")
# parsing test
ci_text <- "2.5-21"
ci_text <- ".19-1.0"
lb <- grep("[0-9]*", ci_text, value = T)
# as.numeric(str_extract_all(ci_text,"\\(?[0-9,.]+\\)?")[[1]])
as.numeric(str_extract_all(ci_text, "[0-9.]+")[[1]])
calc_se <- function(lower, upper){
se <- (upper - lower) / (2 * qnorm(0.975))
return (se)
}
# rename the columns
dat <- dat %>% rename("mOR"  = "Crude OR",
"mCI"  = "Crude OR CI",
"aOR"  = "Adjusted OR",
"aCI"  = "Adjusted OR CI")
dat <- data.table(dat)
# remove the blank rows
dat <- dat[!(is.na(dat$mOR) & is.na(dat$aOR)),]
# remove values not classified
dat <- dat[!(dat$`JMP WASH Category` == "Not Classified")]
# remove reference values
dat <- dat[(dat$mOR != "ref" | is.na(dat$mOR)) & (dat$aOR != "ref" | is.na(dat$aOR)),]
# remove studies not using blood culture to confirm typhoid
dat <- dat[dat$`Blood Culture` != "No",]
# leave only one estimate per study in the same category
dat[is.na(dat$`Multiple extimates`), `Multiple extimates` := "included"]
dat <- dat[dat$`Multiple extimates` == "included",]
# inspect JMP WASH Category
unique(dat$`JMP WASH Category`)
dat %>% count(`JMP WASH Category`)
category_meta <- c("Water Source (Improved)",
"Water Source (Surface water)",
"Water Treatment (Treated water)",
"Water Treatment (Untreated water)",
"Sanitation (Open defecation)",
"Hygiene (Basic)",
"Hygiene (Limited)")
# create baseline data
OR <- as.numeric(ifelse(is.na(dat$aOR), dat$mOR, dat$aOR))
ci_text <- ifelse(is.na(dat$aCI), dat$mCI, dat$aCI)
ci <- str_extract_all(ci_text, "[0-9.]+")
lower <- as.numeric(sapply(ci, function(x) x[1]))
upper <- as.numeric(sapply(ci, function(x) x[2]))
se <- calc_se(lower = log(lower), upper = log(upper))
input_data <- data.frame(category = dat$`JMP WASH Category`,
study    = dat$Study,
log_OR   = log(OR),
SE       = se)
meta_freq <- function(input_category, image_png){
# filter categories
if (input_category == "Potential Protective Factors"){
input_dat_freq <- input_data %>% filter(input_data$category == "Water Source (Improved)"|
input_data$category == "Hygiene (Basic)"|
input_data$category == "Water Treatment (Treated water)"|
input_data$category == "Water Management (Safe water storage)")
} else if (input_category == "Potential Risk Factors"){
input_dat_freq <- input_data %>% filter(input_data$category == "Hygiene (Limited)"|
input_data$category == "Water Treatment (Untreated water)"|
input_data$category == "Sanitation (Open defecation)"|
input_data$category == "Water Management (Unsafe water storage)"|
input_data$category == "Water Source (Surface water)"|
input_data$category == "Sanitation (Unimproved)")
} else {
input_dat_freq <- input_data %>% filter(input_data$category == input_category)
}
# unique(dat$`JMP WASH Category`)
# frequentist random-effect meta-analysis
res <- rma(yi = log_OR, sei = SE, data = input_dat_freq)
summary <- summary(res)
# forest plot
# forest(res, atransf=exp)
# forest(res)
# save funnel plot
png(file = file.path("figures", image_png), width = 1600, height = 1400, res = 300)
funnel (res, xlab = "Log odds ratio") # Log odds ratio with standard error of log odds ratio
# funnel (res, atransf = exp, xlab = "Odds ratio")
title(input_category)
dev.off()
return(summary)}
Water_Source_Improve_fre <-
meta_freq(input_category = "Water Source (Improved)",
image_png      = "Water Source (Improved).png")
Water_Source_Surface_water_fre <-
meta_freq(input_category = "Water Source (Surface water)",
image_png      = "Water Source (Surface water).png")
Water_Treatment_Treated_water_fre <-
meta_freq(input_category = "Water Treatment (Treated water)",
image_png      = "Water Treatment (Treated water).png")
Water_Treatment_Untreated_water_fre <-
meta_freq(input_category = "Water Treatment (Untreated water)",
image_png      = "Water Treatment (Untreated water).png")
Sanitation_Open_defecation_fre <-
meta_freq(input_category = "Sanitation (Open defecation)",
image_png      = "Sanitation (Open defecation).png")
Hygiene_Basic_fre <-
meta_freq(input_category = "Hygiene (Basic)",
image_png      = "Hygiene (Basic).png")
Hygiene_Limited_fre <-
meta_freq(input_category = "Hygiene (Limited)",
image_png      = "Hygiene (Limited).png")
meta_baye <- function(input_category){
# filter categories
if (input_category == "Potential Protective Factors"){
input_dat_baye <- input_data %>% filter(input_data$category == "Water Source (Improved)"|
input_data$category == "Hygiene (Basic)"|
input_data$category == "Water Treatment (Treated water)"|
input_data$category == "Water Management (Safe water storage)")
} else if (input_category == "Potential Risk Factors"){
input_dat_baye <- input_data %>% filter(input_data$category == "Hygiene (Limited)"|
input_data$category == "Water Treatment (Untreated water)"|
input_data$category == "Sanitation (Open defecation)"|
input_data$category == "Water Management (Unsafe water storage)"|
input_data$category == "Water Source (Surface water)"|
input_data$category == "Sanitation (Unimproved)")
} else {
input_dat_baye <- input_data %>% filter(input_data$category == input_category)
}
priors <- c(prior(normal(0,1), class = Intercept),
prior(cauchy(0,0.5), class = sd))
m_brm <- brm(log_OR|se(SE) ~ 1 + (1|study),
data = input_dat_baye,
prior = priors,
iter = 10000)
return(m_brm)}
pooled_effect_draws <- function(m_brm){
# extract the posterior distribution for each study
study.draws <- spread_draws(m_brm, r_study[study,], b_Intercept) %>%
mutate(b_Intercept = r_study + b_Intercept)
# generate the distribution of the pooled effect
pooled.effect.draws <- spread_draws(m_brm, b_Intercept) %>%
mutate(study = "Pooled Effect")
forest.data <- bind_rows(study.draws,
pooled.effect.draws) %>%
ungroup() %>%
# clean the study labels
mutate(study = str_replace_all(study, ".et.al.", " et al.")) %>%
# reorder the study factor levels by effect size (high to low).
mutate(study = reorder(study, b_Intercept)) %>%
# use exp() to revert it to Odd Ratio
mutate(b_Intercept = exp(b_Intercept))
return(forest.data)}
create_forestplot <- function(m_brm,
forest.data,
x_limit,
title_name){
# display the effect size
forest.data.summary <- group_by(forest.data, study) %>%
median_qi(b_Intercept)
forestplot <- ggplot(aes(b_Intercept, relevel(study, "Pooled Effect", after = Inf)),
data = forest.data) +
# Add vertical lines for pooled effect and CI
geom_vline(xintercept = data.table(forest.data.summary)[study == "Pooled Effect", b_Intercept],
color = "grey", size = 0.6) +
geom_vline(xintercept = data.table(forest.data.summary)[study == "Pooled Effect", c(.lower, .upper)],
color = "grey", linetype = 2) +
geom_vline(xintercept = 1, color = "black", size = 0.6) +
scale_x_continuous(limits = c(0, x_limit)) +
# Add posterior distribution for each study individually and pooled effect
stat_pointinterval(.width = c(.8, .95)) +
# Add text and labels
geom_text(data = mutate_if(forest.data.summary,
is.numeric, round, 2),
aes(label = glue("{b_Intercept} [{.lower}, {.upper}]"),
x = Inf), hjust = "inward") +
labs(x = "Odd Ratio [95% Credible Interval]",
y = element_blank()) +
theme_bw() +
ggtitle(paste(title_name)) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size = 15))
return(forestplot)
} # end of function -- create_forest_plot
forest_plot <- function(input_category,
x_limit){
m_brm_input <- meta_baye(input_category)
forest_data <- pooled_effect_draws(m_brm_input)
forestplot  <- create_forestplot(m_brm       = m_brm_input,
forest.data = forest_data,
x_limit     = x_limit,
title_name  = input_category)
# save plot
ggsave (filename = paste(input_category, ".png"),
path = "figures",
width = 7,
height = 3.5,
dpi = 600)
return(m_brm_input)}
# JMP WASH categories included in the meta-analysis
category_meta
dat %>% count(`JMP WASH Category`)
# lapply(category_meta, forest_plot)
# R session aborted
# generate forest plot for each category individually
set.seed(3)
Water_Source_Improve <-
forest_plot(input_category = "Water Source (Improved)",
x_limit        = 3)
Water_Source_Surface_water <-
forest_plot(input_category = "Water Source (Surface water)",
x_limit        = 6)
Water_Treatment_Treated_water <-
forest_plot(input_category = "Water Treatment (Treated water)",
x_limit        = 3)
Water_Treatment_Untreated_water <-
forest_plot(input_category = "Water Treatment (Untreated water)",
x_limit        = 12)
Sanitation_Open_defecation <-
forest_plot(input_category = "Sanitation (Open defecation)",
x_limit        = 6)
Hygiene_Basic <-
forest_plot(input_category = "Hygiene (Basic)",
x_limit        = 3)
Hygiene_Limited <-
forest_plot(input_category = "Hygiene (Limited)",
x_limit        = 10)
# generate forest plot for protective/harmful factors
forest_plot(input_category = "Potential Protective Factors",
x_limit        = 3)
forest_plot(input_category = "Potential Risk Factors",
x_limit        = 10)
Water_Source_Improve
Water_Source_Improve
Water_Source_Surface_water
Water_Source_Surface_water
Water_Treatment_Treated_water
Water_Treatment_Untreated_water
Sanitation_Open_defecation
Sanitation_Open_defecation
Hygiene_Basic
Hygiene_Limited
Water_Source_Improve
Water_Source_Improve
Water_Source_Surface_water
Water_Treatment_Treated_water
Water_Treatment_Untreated_water
Sanitation_Open_defecation
Hygiene_Basic
Hygiene_Limited
Water_Source_Improve_fre
Water_Source_Improve_fre
Water_Source_Improve_fre
Water_Source_Surface_water_fre
Water_Treatment_Treated_water_fre
Water_Source_Improve_fre
e^-0.6750
exp(-0.6750)
exp(-0.6750)
exp(-1.1608)
exp(-0.1891)
Water_Treatment_Treated_water_fre
exp(-0.6491)
exp(1.0271)
exp(-1.0271 )
exp(-0.2711)
Hygiene_Basic_fre
exp(-0.5234)
exp(-0.8303)
exp(-0.2166)
Water_Source_Surface_water_fre
exp( 0.8548)
exp( 0.3040)
exp( 1.4057)
Water_Source_Surface_water_fre
exp( 0.8548)
exp(0.3040)
exp(1.4057)
Water_Treatment_Untreated_water_fre
exp(0.7385)
exp(0.2848)
exp(1.1923)
Sanitation_Open_defecation_fre
exp(0.3342)
exp(-0.4193)
exp(1.0876 )
Hygiene_Limited_fre
exp(0.8412)
exp(0.4719)
exp(1.2105)
# load libraries
library (brms)
setwd("C:/Users/chaelin.kim/OneDrive - International Vaccine Institute/Documents/GitHub/WASH_typhoid")
# load libraries
library (brms)
# import data -- combined data
# input_articles <- read_excel("data/input_articles.xlsx")
dat <- read_sheet('https://docs.google.com/spreadsheets/d/1ArKNfpa124oPdrbGK1-9PnzRWWvffsxgOUfgCVs_p2Q/edit#gid=0', col_types = "ccccccccccccccccccc")
# load libraries
library (brms)
setwd("~/GitHub/WASH_typhoid")
# load libraries
library (brms)
setwd("~/GitHub/WASH_typhoid")
library (brms)
setwd("~/GitHub/WASH_typhoid")
# load libraries
library (brms)
# import data -- combined data
# input_articles <- read_excel("data/input_articles.xlsx")
dat <- read_sheet('https://docs.google.com/spreadsheets/d/1ArKNfpa124oPdrbGK1-9PnzRWWvffsxgOUfgCVs_p2Q/edit#gid=0', col_types = "ccccccccccccccccccc")
