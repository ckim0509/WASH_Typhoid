res <- rma(yi = exp(log_OR), sei = exp(SE), data = input_data) # Perform meta-analysis
summary(res)
# [1] 0.5818
# Bayesian approach
priors <- c(prior(normal(0,1), class = Intercept),
prior(cauchy(0,0.5), class = sd))
m_brm <- brm(log_OR|se(SE) ~ 1 + (1|author),
data = input_data,
prior = priors,
iter = 4000)
summary(m_brm)
# the multilevel version of the effect size as an odds ratio.
exp(fixef(m_brm))
#            Estimate Est.Error      Q2.5    Q97.5
# Intercept 0.5769808   1.20909 0.3848261 0.827306
### Interpreting the results
pp_check(m_brm)
ranef(m_brm)
post.samples <- posterior_samples(m_brm, c("^b", "^sd"))
names(post.samples)
names(post.samples) <- c("smd", "tau")
ggplot(aes(x = smd), data = post.samples) +
geom_density(fill = "lightblue",                # set the color
color = "lightblue", alpha = 0.7) +
geom_point(y = 0,                               # add point at mean
x = mean(post.samples$smd)) +
labs(x = expression(italic(SMD)),
y = element_blank()) +
theme_minimal()
ggplot(aes(x = tau), data = post.samples) +
geom_density(fill = "lightgreen",               # set the color
color = "lightgreen", alpha = 0.7) +
geom_point(y = 0,
x = mean(post.samples$tau)) +        # add point at mean
labs(x = expression(tau),
y = element_blank()) +
theme_minimal()
smd.ecdf <- ecdf(post.samples$smd)
smd.ecdf(0.3)
### Create forest plot
study.draws <- spread_draws(m_brm, r_author[author,], b_Intercept) %>%
mutate(b_Intercept = r_author + b_Intercept)
pooled.effect.draws <- spread_draws(m_brm, b_Intercept) %>%
mutate(author = "Pooled Effect")
forest.data <- bind_rows(study.draws,
pooled.effect.draws) %>%
ungroup() %>%
mutate(author = str_replace_all(author, ".et.al.", " et al.")) %>%
mutate(author = reorder(author, b_Intercept)) %>%
mutate(b_Intercept = exp(b_Intercept)) # use exp() to revert it to Odd Ratio
forest.data.summary <- group_by(forest.data, author) %>%
mean_qi(b_Intercept)
# Forest plot
forestplot <- ggplot(aes(b_Intercept,
relevel(author, "Pooled Effect",
after = Inf)),
data = forest.data) +
# Add vertical lines for pooled effect and CI
geom_vline(xintercept = exp(fixef(m_brm))[1, 1],
color = "grey", size = 1) +
geom_vline(xintercept = exp(fixef(m_brm))[1, 3:4],
color = "grey", linetype = 2) +
geom_vline(xintercept = 1, color = "black",
size = 1) +
scale_x_continuous(limits = c(0, x_limit)) +
# Add densities
geom_density_ridges(fill = "grey",
rel_min_height = 0.01,
col = NA, scale = 1,
alpha = 0.8) +
geom_pointintervalh(data = forest.data.summary,
size = 1) +
# Add text and labels
geom_text(data = mutate_if(forest.data.summary,
is.numeric, round, 2),
aes(label = glue("{b_Intercept} [{.lower}, {.upper}]"),
x = Inf), hjust = "inward") +
labs(x = "Odd Ratio [95% Credible Interval]", # summary measure
y = element_blank()) +
theme_minimal() +
ggtitle(paste(category)) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size = 15))
# save plot
ggsave (filename = paste(category, ".png"),
path = "figures",
width = 8,
height = 6,
dpi = 600)
return(forestplot)
} # end of function -- create_forest_plot
WaterTreatment_TreatedWater <- create_forest_plot("Water treatment - Treated water",
x_limit = 3)
WaterTreatment_TreatedWater
# load libraries
library (brms)
library (dplyr)
library (forcats)
library (ggplot2)
library (ggridges)
library (glue)
library (metafor)
library (readxl)
library (rstan)
library (stringr)
library (tidybayes)
library (googlesheets4)
library (data.table)
# remove all objects from workspace
rm (list = ls ())
setwd("~/GitHub/WASH_typhoid")
# start time
start_time <- Sys.time ()
print (paste0 ("start time = ", start_time))
# import data -- combined data
# input_articles <- read_excel("data/input_articles.xlsx")
dat <- read_sheet('https://docs.google.com/spreadsheets/d/1ArKNfpa124oPdrbGK1-9PnzRWWvffsxgOUfgCVs_p2Q/edit#gid=0', col_types = "ccccccccccc")
# import data -- combined data
# input_articles <- read_excel("data/input_articles.xlsx")
dat <- read_sheet('https://docs.google.com/spreadsheets/d/1ArKNfpa124oPdrbGK1-9PnzRWWvffsxgOUfgCVs_p2Q/edit#gid=0', col_types = "ccccccccccc")
# parsing test
ci_text <- "2.5-21"
ci_text <- ".19-1.0"
lb <- grep("[0-9]*", ci_text, value = T)
# as.numeric(str_extract_all(ci_text,"\\(?[0-9,.]+\\)?")[[1]])
as.numeric(str_extract_all(ci_text, "[0-9.]+")[[1]])
calc_se <- function(lower, upper){
se <- (upper - lower) / (2 * qnorm(0.975))
return (se)
}
# rename the columns
dat <- dat %>% rename("mOR"  = "Crude OR",
"mCI"  = "Crude OR CI",
"aOR"  = "Adjusted OR",
"aCI"  = "Adjusted OR CI")
dat <- data.table(dat)
# remove the blank rows (n = 175 - 0 = 175)
dat <- dat[!(is.na(dat$mOR) & is.na(dat$aOR)),]
# remove values not classified (n = 81)
dat <- dat[!(dat$`JMP WASH Category` == "Trash"| dat$`JMP WASH Category` == "NOT WASH"),]
# remove reference values (n = 77)
dat <- dat[(dat$mOR != "ref" | is.na(dat$mOR)) & (dat$aOR != "ref" | is.na(dat$aOR)),]
# remove studies not using blood culture to confirm typhoid (n = 50)
# check the number of studies not using blood culture to confirm typhoid
# dat %>% filter(dat$Culture == "No") %>% count(Author, Culture)
dat <- dat[dat$Culture != "No",]
# inspect JMP WASH Category
unique(dat$`JMP WASH Category`)
dat %>% count(`JMP WASH Category`)
category_meta <- c("Improved water source",
"Water Source - Surface",
"Water treatment - Treated water",
"Water treatment - Untreated water",
"Sanitation - Open defecation",
"Hygiene - Basic",
"Hygiene - Limited")
# create baseline data
OR <- as.numeric(ifelse(is.na(dat$aOR), dat$mOR, dat$aOR))
ci_text <- ifelse(is.na(dat$aCI), dat$mCI, dat$aCI)
ci <- str_extract_all(ci_text, "[0-9.]+")
lower <- as.numeric(sapply(ci, function(x) x[1]))
upper <- as.numeric(sapply(ci, function(x) x[2]))
se <- calc_se(lower = log(lower), upper = log(upper))
input_data <- data.frame(category = dat$`JMP WASH Category`,
author   = dat$Author,
log_OR   = log(OR),
SE       = se)
meta_freq <- function(input_category){
input_dat_freq <- input_data %>% filter(input_data$category == input_category)
res <- rma(yi = exp(log_OR), sei = exp(SE), data = input_dat_freq) # Perform meta-analysis
summary <- summary(res)
return(summary)}
# summary result -- for each categories
category_meta
lapply(category_meta, meta_freq)
input_dat_baye <- input_data %>% filter(input_data$category == "Water treatment - Untreated water")
priors <- c(prior(normal(0,1), class = Intercept),
prior(cauchy(0,0.5), class = sd))
m_brm <- brm(log_OR|se(SE) ~ 1 + (1|author),
data = input_dat_baye,
prior = priors,
iter = 4000)
summary(m_brm)
# the multilevel version of the effect size as an odds ratio.
exp(fixef(m_brm))
### Create forest plot
study.draws <- spread_draws(m_brm, r_author[author,], b_Intercept) %>%
mutate(b_Intercept = r_author + b_Intercept)
pooled.effect.draws <- spread_draws(m_brm, b_Intercept) %>%
mutate(author = "Pooled Effect")
forest.data <- bind_rows(study.draws,
pooled.effect.draws) %>%
ungroup() %>%
mutate(author = str_replace_all(author, ".et.al.", " et al.")) %>%
mutate(author = reorder(author, b_Intercept)) %>%
mutate(b_Intercept = exp(b_Intercept)) # use exp() to revert it to Odd Ratio
forest.data.summary <- group_by(forest.data, author) %>%
mean_qi(b_Intercept)
input_dat_baye <- input_data %>% filter(input_data$category == "Water treatment - Untreated water")
summary(m_brm)
priors <- c(prior(normal(0,1), class = Intercept),
prior(cauchy(0,0.5), class = sd))
m_brm <- brm(log_OR|se(SE) ~ 1 + (1|author),
data = input_dat_baye,
prior = priors,
iter = 4000)
summary(m_brm)
tudy.draws <- spread_draws(m_brm, r_author[author,], b_Intercept) %>%
mutate(b_Intercept = r_author + b_Intercept)
study.draws <- spread_draws(m_brm, r_author[author,], b_Intercept) %>%
mutate(b_Intercept = r_author + b_Intercept)
study.draws
pooled.effect.draws <- spread_draws(m_brm, b_Intercept) %>%
mutate(author = "Pooled Effect")
pooled.effect.draws
forest.data <- bind_rows(study.draws,
pooled.effect.draws) %>%
ungroup() %>%
mutate(author = str_replace_all(author, ".et.al.", " et al.")) %>%
mutate(author = reorder(author, b_Intercept)) %>%
mutate(b_Intercept = exp(b_Intercept)) # use exp() to revert it to Odd Ratio
forest.data.summary <- group_by(forest.data, author) %>%
mean_qi(b_Intercept)
forestplot <- ggplot(aes(b_Intercept,
relevel(author, "Pooled Effect",
after = Inf)),
data = forest.data) +
# Add vertical lines for pooled effect and CI
geom_vline(xintercept = exp(fixef(m_brm))[1, 1],
color = "grey", size = 1) +
geom_vline(xintercept = exp(fixef(m_brm))[1, 3:4],
color = "grey", linetype = 2) +
geom_vline(xintercept = 1, color = "black",
size = 1) +
scale_x_continuous(limits = c(0, 4)) +
# Add densities
geom_density_ridges(fill = "grey",
rel_min_height = 0.01,
col = NA, scale = 1,
alpha = 0.8) +
geom_pointintervalh(data = forest.data.summary,
size = 1) +
# Add text and labels
geom_text(data = mutate_if(forest.data.summary,
is.numeric, round, 2),
aes(label = glue("{b_Intercept} [{.lower}, {.upper}]"),
x = Inf), hjust = "inward") +
labs(x = "Odd Ratio [95% Credible Interval]", # summary measure
y = element_blank()) +
theme_minimal() +
ggtitle("paste(category)") +
theme(plot.title = element_text(hjust=0.5, vjust=2, size = 15))
forestplot
summary(m_brm)
View(dat)
create_forestplot<- function(title_name){
forestplot <- ggplot(aes(b_Intercept,
relevel(author, "Pooled Effect",
after = Inf)),
data = forest.data) +
# Add vertical lines for pooled effect and CI
geom_vline(xintercept = exp(fixef(m_brm))[1, 1],
color = "grey", size = 1) +
geom_vline(xintercept = exp(fixef(m_brm))[1, 3:4],
color = "grey", linetype = 2) +
geom_vline(xintercept = 1, color = "black",
size = 1) +
scale_x_continuous(limits = c(0, 4)) +
# Add densities
geom_density_ridges(fill = "grey",
rel_min_height = 0.01,
col = NA, scale = 1,
alpha = 0.8) +
geom_pointintervalh(data = forest.data.summary,
size = 1) +
# Add text and labels
geom_text(data = mutate_if(forest.data.summary,
is.numeric, round, 2),
aes(label = glue("{b_Intercept} [{.lower}, {.upper}]"),
x = Inf), hjust = "inward") +
labs(x = "Odd Ratio [95% Credible Interval]", # summary measure
y = element_blank()) +
theme_minimal() +
ggtitle(paste(title_name)) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size = 15))
# save plot
ggsave (filename = paste(category, ".png"),
path = "figures",
width = 8,
height = 6,
dpi = 600)
return(forestplot)
} # end of function -- create_forest_plot
create_forestplot<- function(title_name){
forestplot <- ggplot(aes(b_Intercept,
relevel(author, "Pooled Effect",
after = Inf)),
data = forest.data) +
# Add vertical lines for pooled effect and CI
geom_vline(xintercept = exp(fixef(m_brm))[1, 1],
color = "grey", size = 1) +
geom_vline(xintercept = exp(fixef(m_brm))[1, 3:4],
color = "grey", linetype = 2) +
geom_vline(xintercept = 1, color = "black",
size = 1) +
scale_x_continuous(limits = c(0, 4)) +
# Add densities
geom_density_ridges(fill = "grey",
rel_min_height = 0.01,
col = NA, scale = 1,
alpha = 0.8) +
geom_pointintervalh(data = forest.data.summary,
size = 1) +
# Add text and labels
geom_text(data = mutate_if(forest.data.summary,
is.numeric, round, 2),
aes(label = glue("{b_Intercept} [{.lower}, {.upper}]"),
x = Inf), hjust = "inward") +
labs(x = "Odd Ratio [95% Credible Interval]", # summary measure
y = element_blank()) +
theme_minimal() +
ggtitle(paste(title_name)) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size = 15))
# save plot
ggsave (filename = paste(title_name, ".png"),
path = "figures",
width = 8,
height = 6,
dpi = 600)
return(forestplot)
} # end of function -- create_forest_plot
study.draws <- spread_draws(m_brm, r_author[author,], b_Intercept) %>%
mutate(b_Intercept = r_author + b_Intercept)
study.draws
pooled.effect.draws <- spread_draws(m_brm, b_Intercept) %>%
mutate(author = "Pooled Effect")
pooled.effect.draws
forest.data <- bind_rows(study.draws,
pooled.effect.draws) %>%
ungroup() %>%
mutate(author = str_replace_all(author, ".et.al.", " et al.")) %>%
mutate(author = reorder(author, b_Intercept)) %>%
mutate(b_Intercept = exp(b_Intercept)) # use exp() to revert it to Odd Ratio
forest.data.summary <- group_by(forest.data, author) %>%
mean_qi(b_Intercept)
forest.data
forest.data.summary
input_dat_baye
forest.data
forest.data.summary
forest.data
forest.data.summary
# load libraries
library (brms)
library (dplyr)
library (forcats)
library (ggplot2)
library (ggridges)
library (glue)
library (metafor)
library (readxl)
library (rstan)
library (stringr)
library (tidybayes)
library (googlesheets4)
library (data.table)
# remove all objects from workspace
rm (list = ls ())
setwd("~/GitHub/WASH_typhoid")
# start time
start_time <- Sys.time ()
print (paste0 ("start time = ", start_time))
# import data -- combined data
# input_articles <- read_excel("data/input_articles.xlsx")
dat <- read_sheet('https://docs.google.com/spreadsheets/d/1ArKNfpa124oPdrbGK1-9PnzRWWvffsxgOUfgCVs_p2Q/edit#gid=0', col_types = "ccccccccccc")
# parsing test
ci_text <- "2.5-21"
ci_text <- ".19-1.0"
lb <- grep("[0-9]*", ci_text, value = T)
# as.numeric(str_extract_all(ci_text,"\\(?[0-9,.]+\\)?")[[1]])
as.numeric(str_extract_all(ci_text, "[0-9.]+")[[1]])
calc_se <- function(lower, upper){
se <- (upper - lower) / (2 * qnorm(0.975))
return (se)
}
# rename the columns
dat <- dat %>% rename("mOR"  = "Crude OR",
"mCI"  = "Crude OR CI",
"aOR"  = "Adjusted OR",
"aCI"  = "Adjusted OR CI")
dat <- data.table(dat)
# remove the blank rows (n = 175 - 0 = 175)
dat <- dat[!(is.na(dat$mOR) & is.na(dat$aOR)),]
# remove values not classified (n = 80)
dat <- dat[!(dat$`JMP WASH Category` == "Trash"| dat$`JMP WASH Category` == "NOT WASH"),]
# remove reference values (n = 76)
dat <- dat[(dat$mOR != "ref" | is.na(dat$mOR)) & (dat$aOR != "ref" | is.na(dat$aOR)),]
# remove studies not using blood culture to confirm typhoid (n = 49)
# check the number of studies not using blood culture to confirm typhoid
# dat %>% filter(dat$Culture == "No") %>% count(Author, Culture)
dat <- dat[dat$Culture != "No",]
# inspect JMP WASH Category
unique(dat$`JMP WASH Category`)
dat %>% count(`JMP WASH Category`)
category_meta <- c("Improved water source",
"Water Source - Surface",
"Water treatment - Treated water",
"Water treatment - Untreated water",
"Sanitation - Open defecation",
"Hygiene - Basic",
"Hygiene - Limited")
# create baseline data
OR <- as.numeric(ifelse(is.na(dat$aOR), dat$mOR, dat$aOR))
ci_text <- ifelse(is.na(dat$aCI), dat$mCI, dat$aCI)
ci <- str_extract_all(ci_text, "[0-9.]+")
lower <- as.numeric(sapply(ci, function(x) x[1]))
upper <- as.numeric(sapply(ci, function(x) x[2]))
se <- calc_se(lower = log(lower), upper = log(upper))
input_data <- data.frame(category = dat$`JMP WASH Category`,
author   = dat$Author,
log_OR   = log(OR),
SE       = se)
meta_freq <- function(input_category){
input_dat_freq <- input_data %>% filter(input_data$category == input_category)
res <- rma(yi = exp(log_OR), sei = exp(SE), data = input_dat_freq) # Perform meta-analysis
summary <- summary(res)
return(summary)}
# summary result -- for each categories
category_meta
lapply(category_meta, meta_freq)
meta_baye <- function(input_category){
input_dat_baye <- input_data %>% filter(input_data$category == input_category)
priors <- c(prior(normal(0,1), class = Intercept),
prior(cauchy(0,0.5), class = sd))
m_brm <- brm(log_OR|se(SE) ~ 1 + (1|author),
data = input_dat_baye,
prior = priors,
iter = 4000)
# summary(m.brm)
return(m_brm)}
pooled_effect_draws <- function(m_brm){
# extract the posterior distribution for each study
study.draws <- spread_draws(m_brm, r_author[author,], b_Intercept) %>%
mutate(b_Intercept = r_author + b_Intercept)
# generate the distribution of the pooled effect
pooled.effect.draws <- spread_draws(m_brm, b_Intercept) %>%
mutate(author = "Pooled Effect")
forest.data <- bind_rows(study.draws,
pooled.effect.draws) %>%
ungroup() %>%
# clean the study labels
mutate(author = str_replace_all(author, ".et.al.", " et al.")) %>%
# reorder the study factor levels by effect size (high to low).
mutate(author = reorder(author, b_Intercept)) %>%
# use exp() to revert it to Odd Ratio
mutate(b_Intercept = exp(b_Intercept))
return(forest.data)}
create_forestplot <- function(m_brm,
forest.data,
x_limit,
title_name){
# display the effect size
forest.data.summary <- group_by(forest.data, author) %>%
mean_qi(b_Intercept)
forestplot <- ggplot(aes(b_Intercept,
relevel(author, "Pooled Effect",
after = Inf)),
data = forest.data) +
# Add vertical lines for pooled effect and CI
geom_vline(xintercept = exp(fixef(m_brm))[1, 1],
color = "grey", size = 1) +
geom_vline(xintercept = exp(fixef(m_brm))[1, 3:4],
color = "grey", linetype = 2) +
geom_vline(xintercept = 1, color = "black",
size = 1) +
scale_x_continuous(limits = c(0, x_limit)) +
# Add densities
geom_density_ridges(fill = "grey",
rel_min_height = 0.01,
col = NA, scale = 1,
alpha = 0.8) +
geom_pointintervalh(data = forest.data.summary,
size = 1) +
# Add text and labels
geom_text(data = mutate_if(forest.data.summary,
is.numeric, round, 2),
aes(label = glue("{b_Intercept} [{.lower}, {.upper}]"),
x = Inf), hjust = "inward") +
labs(x = "Odd Ratio [95% Credible Interval]", # summary measure
y = element_blank()) +
theme_minimal() +
ggtitle(paste(title_name)) +
theme(plot.title = element_text(hjust=0.5, vjust=2, size = 15))
return(forestplot)
} # end of function -- create_forest_plot
forest_plot <- function(input_category, x_limit){
m_brm_input <- meta_baye(input_category)
forest_data <- pooled_effect_draws(m_brm_input)
forestplot  <- create_forestplot(m_brm       = m_brm_input,
forest.data = forest_data,
x_limit     = x_limit,
title_name  = input_category)
# save plot
ggsave (filename = paste(input_category, ".png"),
path = "figures",
width = 8,
height = 6,
dpi = 600)
retrun(forestplot)}
forest_plot(input_category = "Hygiene - Limited",
x_limit        = 10)
forest_plot(input_category = "Hygiene - Basic",
x_limit        = 3)
